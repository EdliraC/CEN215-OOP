

public class TestEdible {
	

		public static void main(String[] args) {
		Object[] objects = {new Tiger(), new Chicken(), new Apple()};
		for (int i = 0; i < objects.length; i++) {
		if (objects[i] instanceof Edible)
		System.out.println(((Edible)objects[i]).howToEat());
		
		 if (objects[i] instanceof Animal) {
		System.out.println(((Animal)objects[i]).sound());
		}
		}
		}
		
}

	 abstract class Animal {
	    private double weight;

	    public double getWeight() {
	        return weight;
	    }

	    public void setWeight(double weight) {
	        this.weight = weight;
	    }

	    // return animal sound
	    public abstract String sound();
	}
	 
	 class Tiger extends Animal{
		    @Override
		    public String sound() {
		        return "Tiger: RROOAARR";
		    }
		}

	 interface Edible {
		    public abstract String howToEat();
		}
	 
abstract class Fruit implements Edible{
		    /*
		    * Since it does not implement the howToEat method, Fruit must be defined as abstract
		    * Write your own properties or methods
		    * */
		}
	class Apple extends Fruit{
	    @Override
	    public String howToEat() {
	        return "Apple: peel it";
	    }
	}
	class Chicken extends Animal implements Edible{
	    @Override
	    public String sound() {
	        return "Chicken: cock-a-doodle-do";
	    }

	    @Override
	    public String howToEat() {
	        return "Chicken: Fry it";
	    }
	}
